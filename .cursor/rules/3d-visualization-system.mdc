---
description:
globs:
alwaysApply: false
---

# 3D Visualization System - Smaragdus Viridi

## Ring Size Visualizer with Three.js

### Core 3D Component

```typescript
// features/visualization/components/ring-size-visualizer.tsx
"use client";

import { useState, useRef, useEffect, useMemo } from "react";
import * as THREE from "three";
import { Gemstone } from "@/features/gemstones/types/gemstone.types";

type RingSize = "5" | "6" | "7" | "8" | "9" | "10";
type FingerType = "slim" | "average" | "wide";

interface RingSizeVisualizerProps {
  gemstone: Gemstone;
  onSizeChange?: (size: RingSize) => void;
}

export function RingSizeVisualizer({
  gemstone,
  onSizeChange,
}: RingSizeVisualizerProps) {
  const mountRef = useRef<HTMLDivElement>(null);
  const [selectedSize, setSelectedSize] = useState<RingSize>("7");
  const [fingerType, setFingerType] = useState<FingerType>("average");
  const [isLoading, setIsLoading] = useState(true);

  const sceneRef = useRef<THREE.Scene>();
  const rendererRef = useRef<THREE.WebGLRenderer>();
  const cameraRef = useRef<THREE.PerspectiveCamera>();
  const animationIdRef = useRef<number>();

  // Memoize ring dimensions based on size
  const ringDimensions = useMemo(() => {
    const sizeMap: Record<
      RingSize,
      { diameter: number; circumference: number }
    > = {
      "5": { diameter: 15.7, circumference: 49.3 },
      "6": { diameter: 16.5, circumference: 51.9 },
      "7": { diameter: 17.3, circumference: 54.4 },
      "8": { diameter: 18.2, circumference: 57.2 },
      "9": { diameter: 19.0, circumference: 59.5 },
      "10": { diameter: 19.8, circumference: 62.2 },
    };
    return sizeMap[selectedSize];
  }, [selectedSize]);

  // Memoize finger dimensions based on type
  const fingerDimensions = useMemo(() => {
    const baseRadius = ringDimensions.diameter / 2;
    const typeMultiplier = {
      slim: 0.9,
      average: 1.0,
      wide: 1.1,
    };
    return {
      radius: baseRadius * typeMultiplier[fingerType],
      length: 60,
    };
  }, [ringDimensions, fingerType]);

  useEffect(() => {
    if (!mountRef.current) return;

    // Initialize Three.js scene
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xf8f9fa);

    const camera = new THREE.PerspectiveCamera(45, 400 / 300, 0.1, 1000);

    const renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true,
    });
    renderer.setSize(400, 300);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    // Clear any existing content
    while (mountRef.current.firstChild) {
      mountRef.current.removeChild(mountRef.current.firstChild);
    }

    mountRef.current.appendChild(renderer.domElement);

    // Create finger model
    const fingerGeometry = createFingerGeometry(fingerDimensions);
    const fingerMaterial = new THREE.MeshLambertMaterial({
      color: 0xfdbcb4, // skin tone
      transparent: true,
      opacity: 0.8,
    });
    const finger = new THREE.Mesh(fingerGeometry, fingerMaterial);
    finger.castShadow = true;
    finger.receiveShadow = true;
    scene.add(finger);

    // Create ring band
    const ringGeometry = createRingGeometry(ringDimensions);
    const ringMaterial = new THREE.MeshPhongMaterial({
      color: 0xd4af37, // gold color
      shininess: 100,
      transparent: true,
      opacity: 0.9,
    });
    const ring = new THREE.Mesh(ringGeometry, ringMaterial);
    ring.castShadow = true;
    scene.add(ring);

    // Create gemstone model
    const gemGeometry = createGemstoneGeometry(gemstone);
    const gemMaterial = new THREE.MeshPhongMaterial({
      color: getGemstoneColor(gemstone.color),
      transparent: true,
      opacity: 0.85,
      shininess: 100,
      refractionRatio: 0.8,
    });
    const gem = new THREE.Mesh(gemGeometry, gemMaterial);

    // Position gemstone on ring
    const gemHeight = gemstone.dimensions.depth_mm / 2;
    gem.position.set(0, fingerDimensions.radius + 2 + gemHeight, 0);
    gem.castShadow = true;
    scene.add(gem);

    // Add lighting setup
    setupLighting(scene);

    // Position camera
    camera.position.set(0, 10, 40);
    camera.lookAt(0, 0, 0);

    // Animation loop
    const animate = () => {
      animationIdRef.current = requestAnimationFrame(animate);

      // Rotate ring and gemstone slowly
      ring.rotation.y += 0.005;
      gem.rotation.y += 0.005;

      renderer.render(scene, camera);
    };

    animate();
    setIsLoading(false);

    // Store refs for cleanup
    sceneRef.current = scene;
    rendererRef.current = renderer;
    cameraRef.current = camera;

    return () => {
      if (animationIdRef.current) {
        cancelAnimationFrame(animationIdRef.current);
      }
      if (mountRef.current && renderer.domElement) {
        mountRef.current.removeChild(renderer.domElement);
      }

      // Dispose of Three.js objects
      scene.traverse((object) => {
        if (object instanceof THREE.Mesh) {
          object.geometry.dispose();
          if (Array.isArray(object.material)) {
            object.material.forEach((material) => material.dispose());
          } else {
            object.material.dispose();
          }
        }
      });
      renderer.dispose();
    };
  }, [gemstone, ringDimensions, fingerDimensions]);

  const handleSizeChange = (size: RingSize) => {
    setSelectedSize(size);
    onSizeChange?.(size);
  };

  return (
    <div className="space-y-4">
      <div className="relative">
        <div
          ref={mountRef}
          className="border rounded-lg overflow-hidden bg-gradient-to-b from-gray-50 to-gray-100"
        />

        {isLoading && (
          <div className="absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600" />
          </div>
        )}

        {/* Gemstone info overlay */}
        <div className="absolute top-2 left-2 bg-white bg-opacity-90 rounded px-3 py-2 text-sm">
          <div className="font-medium">{gemstone.name}</div>
          <div className="text-gray-600">
            {gemstone.weight_carats}ct â€¢ {gemstone.color} â€¢ {gemstone.cut}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-2">Ring Size</label>
          <select
            value={selectedSize}
            onChange={(e) => handleSizeChange(e.target.value as RingSize)}
            className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="5">5 (15.7mm)</option>
            <option value="6">6 (16.5mm)</option>
            <option value="7">7 (17.3mm)</option>
            <option value="8">8 (18.2mm)</option>
            <option value="9">9 (19.0mm)</option>
            <option value="10">10 (19.8mm)</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Finger Type</label>
          <select
            value={fingerType}
            onChange={(e) => setFingerType(e.target.value as FingerType)}
            className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="slim">Slim</option>
            <option value="average">Average</option>
            <option value="wide">Wide</option>
          </select>
        </div>
      </div>

      {/* Size guide info */}
      <div className="bg-blue-50 rounded-lg p-3 text-sm">
        <div className="font-medium text-blue-900 mb-1">Size Guide</div>
        <div className="text-blue-700">
          Inner diameter: {ringDimensions.diameter}mm â€¢ Circumference:{" "}
          {ringDimensions.circumference}mm
        </div>
        <div className="text-blue-600 mt-1">
          ðŸ’¡ Use a ring sizer or measure an existing ring for accuracy
        </div>
      </div>
    </div>
  );
}

// Helper functions for 3D geometry creation
function createFingerGeometry(dimensions: { radius: number; length: number }) {
  return new THREE.CylinderGeometry(
    dimensions.radius,
    dimensions.radius - 2,
    dimensions.length,
    32
  );
}

function createRingGeometry(dimensions: { diameter: number }) {
  const outerRadius = dimensions.diameter / 2 + 1;
  const innerRadius = dimensions.diameter / 2;
  const height = 3;

  const shape = new THREE.Shape();
  shape.absarc(0, 0, outerRadius, 0, Math.PI * 2, false);

  const hole = new THREE.Path();
  hole.absarc(0, 0, innerRadius, 0, Math.PI * 2, true);
  shape.holes.push(hole);

  return new THREE.ExtrudeGeometry(shape, {
    depth: height,
    bevelEnabled: true,
    bevelSegments: 8,
    bevelSize: 0.5,
    bevelThickness: 0.5,
  });
}

function createGemstoneGeometry(gemstone: Gemstone) {
  const width = gemstone.dimensions.width_mm / 2;
  const height = gemstone.dimensions.depth_mm;
  const length = gemstone.dimensions.length_mm / 2;

  switch (gemstone.cut) {
    case "round":
      return new THREE.SphereGeometry(width, 16, 16);
    case "emerald":
      return new THREE.BoxGeometry(width, height, length);
    case "oval":
      return new THREE.SphereGeometry(width, 16, 8);
    default:
      return new THREE.ConeGeometry(width, height, 8);
  }
}

function getGemstoneColor(color: string): number {
  const colorMap: Record<string, number> = {
    red: 0xdc143c,
    blue: 0x4169e1,
    green: 0x32cd32,
    yellow: 0xffd700,
    pink: 0xff69b4,
    white: 0xffffff,
    black: 0x2f2f2f,
    colorless: 0xf0f0f0,
    D: 0xffffff,
    E: 0xfefefe,
    F: 0xfdfdfd,
    G: 0xfbfbfb,
    H: 0xf9f9f9,
    I: 0xf7f7f7,
    J: 0xf5f5f5,
  };
  return colorMap[color] || 0xffffff;
}

function setupLighting(scene: THREE.Scene) {
  // Ambient light for overall illumination
  const ambientLight = new THREE.AmbientLight(0x404040, 0.4);
  scene.add(ambientLight);

  // Main directional light
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
  directionalLight.position.set(10, 10, 5);
  directionalLight.castShadow = true;
  directionalLight.shadow.mapSize.width = 2048;
  directionalLight.shadow.mapSize.height = 2048;
  directionalLight.shadow.camera.near = 0.5;
  directionalLight.shadow.camera.far = 50;
  scene.add(directionalLight);

  // Fill light from the opposite side
  const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
  fillLight.position.set(-10, 5, -5);
  scene.add(fillLight);

  // Point light for gemstone sparkle
  const pointLight = new THREE.PointLight(0xffffff, 0.5, 100);
  pointLight.position.set(0, 20, 10);
  scene.add(pointLight);
}
```

## Ring Size Calculator

```typescript
// features/visualization/utils/ring-size-calculator.ts
export interface RingSizeData {
  us: string;
  uk: string;
  eu: number;
  diameter_mm: number;
  circumference_mm: number;
}

export const RING_SIZES: RingSizeData[] = [
  { us: "3", uk: "F", eu: 44, diameter_mm: 14.0, circumference_mm: 44.0 },
  { us: "3.5", uk: "G", eu: 45, diameter_mm: 14.4, circumference_mm: 45.2 },
  { us: "4", uk: "H", eu: 46, diameter_mm: 14.8, circumference_mm: 46.5 },
  { us: "4.5", uk: "I", eu: 47, diameter_mm: 15.3, circumference_mm: 48.0 },
  { us: "5", uk: "J", eu: 49, diameter_mm: 15.7, circumference_mm: 49.3 },
  { us: "5.5", uk: "K", eu: 50, diameter_mm: 16.1, circumference_mm: 50.6 },
  { us: "6", uk: "L", eu: 51, diameter_mm: 16.5, circumference_mm: 51.9 },
  { us: "6.5", uk: "M", eu: 53, diameter_mm: 16.9, circumference_mm: 53.1 },
  { us: "7", uk: "N", eu: 54, diameter_mm: 17.3, circumference_mm: 54.4 },
  { us: "7.5", uk: "O", eu: 55, diameter_mm: 17.7, circumference_mm: 55.7 },
  { us: "8", uk: "P", eu: 56, diameter_mm: 18.2, circumference_mm: 57.2 },
  { us: "8.5", uk: "Q", eu: 58, diameter_mm: 18.6, circumference_mm: 58.5 },
  { us: "9", uk: "R", eu: 59, diameter_mm: 19.0, circumference_mm: 59.5 },
  { us: "9.5", uk: "S", eu: 60, diameter_mm: 19.4, circumference_mm: 61.0 },
  { us: "10", uk: "T", eu: 61, diameter_mm: 19.8, circumference_mm: 62.2 },
];

export function findRingSizeByDiameter(
  diameter_mm: number
): RingSizeData | null {
  return (
    RING_SIZES.find((size) => Math.abs(size.diameter_mm - diameter_mm) < 0.3) ||
    null
  );
}

export function findRingSizeByCircumference(
  circumference_mm: number
): RingSizeData | null {
  return (
    RING_SIZES.find(
      (size) => Math.abs(size.circumference_mm - circumference_mm) < 1.0
    ) || null
  );
}

export function convertRingSize(
  from: "us" | "uk" | "eu",
  to: "us" | "uk" | "eu",
  value: string | number
): string | number | null {
  const size = RING_SIZES.find((s) => s[from] == value);
  return size ? size[to] : null;
}
```

## Size Guide Component

```typescript
// features/visualization/components/ring-size-guide.tsx
"use client";

import { useState } from "react";
import {
  RING_SIZES,
  findRingSizeByDiameter,
} from "../utils/ring-size-calculator";

export function RingSizeGuide() {
  const [measurement, setMeasurement] = useState("");
  const [measurementType, setMeasurementType] = useState<
    "diameter" | "circumference"
  >("diameter");
  const [suggestedSize, setSuggestedSize] = useState<any>(null);

  const handleMeasurementChange = (value: string) => {
    setMeasurement(value);

    if (value && !isNaN(Number(value))) {
      const numValue = Number(value);

      if (measurementType === "diameter") {
        const size = findRingSizeByDiameter(numValue);
        setSuggestedSize(size);
      } else {
        const size = RING_SIZES.find(
          (s) => Math.abs(s.circumference_mm - numValue) < 1.0
        );
        setSuggestedSize(size);
      }
    } else {
      setSuggestedSize(null);
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg border p-6">
        <h3 className="text-lg font-semibold mb-4">Find Your Ring Size</h3>

        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">
              I have a measurement of:
            </label>
            <div className="flex space-x-4">
              <label className="flex items-center">
                <input
                  type="radio"
                  name="measurementType"
                  value="diameter"
                  checked={measurementType === "diameter"}
                  onChange={(e) =>
                    setMeasurementType(e.target.value as "diameter")
                  }
                  className="mr-2"
                />
                Inner diameter (mm)
              </label>
              <label className="flex items-center">
                <input
                  type="radio"
                  name="measurementType"
                  value="circumference"
                  checked={measurementType === "circumference"}
                  onChange={(e) =>
                    setMeasurementType(e.target.value as "circumference")
                  }
                  className="mr-2"
                />
                Circumference (mm)
              </label>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Enter measurement:
            </label>
            <input
              type="number"
              step="0.1"
              placeholder={measurementType === "diameter" ? "17.3" : "54.4"}
              value={measurement}
              onChange={(e) => handleMeasurementChange(e.target.value)}
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          {suggestedSize && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <h4 className="font-medium text-green-800 mb-2">
                Suggested Ring Size:
              </h4>
              <div className="text-green-700">
                <div>
                  US Size: <strong>{suggestedSize.us}</strong>
                </div>
                <div>
                  UK Size: <strong>{suggestedSize.uk}</strong>
                </div>
                <div>
                  EU Size: <strong>{suggestedSize.eu}</strong>
                </div>
                <div className="text-sm mt-2">
                  Diameter: {suggestedSize.diameter_mm}mm â€¢ Circumference:{" "}
                  {suggestedSize.circumference_mm}mm
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Size Chart */}
      <div className="bg-white rounded-lg border p-6">
        <h3 className="text-lg font-semibold mb-4">Ring Size Chart</h3>

        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b">
                <th className="text-left p-2">US</th>
                <th className="text-left p-2">UK</th>
                <th className="text-left p-2">EU</th>
                <th className="text-left p-2">Diameter (mm)</th>
                <th className="text-left p-2">Circumference (mm)</th>
              </tr>
            </thead>
            <tbody>
              {RING_SIZES.map((size) => (
                <tr key={size.us} className="border-b hover:bg-gray-50">
                  <td className="p-2 font-medium">{size.us}</td>
                  <td className="p-2">{size.uk}</td>
                  <td className="p-2">{size.eu}</td>
                  <td className="p-2">{size.diameter_mm}</td>
                  <td className="p-2">{size.circumference_mm}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Measurement Instructions */}
      <div className="bg-blue-50 rounded-lg border border-blue-200 p-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-4">
          How to Measure
        </h3>

        <div className="space-y-3 text-blue-700">
          <div>
            <strong>Method 1 - Existing Ring:</strong>
            <p className="text-sm">
              Measure the inside diameter of a ring that fits well on the
              desired finger.
            </p>
          </div>

          <div>
            <strong>Method 2 - String/Paper:</strong>
            <p className="text-sm">
              Wrap string around the finger, mark where it overlaps, then
              measure the length for circumference.
            </p>
          </div>

          <div>
            <strong>Method 3 - Ring Sizer:</strong>
            <p className="text-sm">
              Use a professional ring sizer for the most accurate measurement.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
```

## Performance Optimization

### 3D Component Loading Strategy

```typescript
// features/visualization/components/lazy-3d-visualizer.tsx
"use client";

import { lazy, Suspense } from "react";

// Lazy load the heavy 3D component
const RingSizeVisualizer = lazy(() =>
  import("./ring-size-visualizer").then((module) => ({
    default: module.RingSizeVisualizer,
  }))
);

interface Lazy3DVisualizerProps {
  gemstone: Gemstone;
  onSizeChange?: (size: RingSize) => void;
}

export function Lazy3DVisualizer(props: Lazy3DVisualizerProps) {
  return (
    <Suspense fallback={<Visualizer3DLoading />}>
      <RingSizeVisualizer {...props} />
    </Suspense>
  );
}

function Visualizer3DLoading() {
  return (
    <div className="space-y-4">
      <div className="h-[300px] bg-gray-100 rounded-lg flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4" />
          <p className="text-gray-600">Loading 3D visualizer...</p>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div className="h-10 bg-gray-200 rounded animate-pulse" />
        <div className="h-10 bg-gray-200 rounded animate-pulse" />
      </div>
    </div>
  );
}
```

## Best Practices

### Performance

- Lazy load 3D components to reduce initial bundle size
- Dispose of Three.js objects properly to prevent memory leaks
- Use memoization for expensive calculations
- Limit animation frame rate for better performance
- Optimize geometry complexity based on device capabilities

### User Experience

- Provide fallback content while 3D loads
- Show clear size conversion information
- Allow easy switching between measurement systems
- Provide measurement instructions and guides
- Responsive design for mobile devices

### Technical Considerations

- Handle WebGL context loss gracefully
- Test on various devices and browsers
- Monitor GPU memory usage
- Implement error boundaries for 3D failures
- Progressive enhancement for non-WebGL browsers
