#!/usr/bin/env node

/**
 * Diverse Gemstone Selection Script
 * Selects 20 gemstones from different categories for AI analysis testing
 */

import fs from "fs/promises";
import path from "path";

const GEMS_SOURCE = "/Volumes/2TB/gems";
const TARGET_COUNT = 20;

// Define categories with their Russian letter prefixes and likely types
const CATEGORIES = {
  –ò: { name: "Emerald (–ò–∑—É–º—Ä—É–¥)", count: 3 },
  –ì: { name: "Garnet (–ì—Ä–∞–Ω–∞—Ç)", count: 3 },
  –°: { name: "Sapphire (–°–∞–ø—Ñ–∏—Ä)", count: 3 },
  –ê: { name: "Amethyst (–ê–º–µ—Ç–∏—Å—Ç)", count: 2 },
  –ï: { name: "Unknown E-type", count: 2 },
  –¶: { name: "Unknown Ts-type", count: 2 },
  –ù: { name: "Unknown N-type", count: 1 },
  –¢: { name: "Unknown T-type", count: 1 },
  –ö: { name: "Unknown K-type", count: 1 },
  –§: { name: "Unknown F-type", count: 1 },
  –í: { name: "Unknown V-type", count: 1 },
};

async function getGemstonesInCategory(letter) {
  try {
    const allDirs = await fs.readdir(GEMS_SOURCE);
    const categoryDirs = allDirs.filter((dir) => dir.startsWith(letter + " "));
    return categoryDirs.map((dir) => path.join(GEMS_SOURCE, dir));
  } catch (error) {
    console.error(`Error reading category ${letter}:`, error.message);
    return [];
  }
}

async function selectRandomFromArray(array, count) {
  const shuffled = [...array].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

async function selectDiverseGemstones() {
  console.log("üîç Selecting diverse gemstones for AI analysis testing...\n");

  const selectedPaths = [];

  for (const [letter, config] of Object.entries(CATEGORIES)) {
    console.log(
      `üì¶ Category ${letter} (${config.name}): selecting ${config.count} gemstones`
    );

    const categoryGems = await getGemstonesInCategory(letter);
    console.log(`   Found ${categoryGems.length} gemstones in category`);

    if (categoryGems.length === 0) {
      console.log(`   ‚ö†Ô∏è No gemstones found for category ${letter}`);
      continue;
    }

    const selected = await selectRandomFromArray(categoryGems, config.count);
    selectedPaths.push(...selected);

    selected.forEach((gemPath) => {
      const gemName = path.basename(gemPath);
      console.log(`   ‚úì Selected: ${gemName}`);
    });

    console.log("");
  }

  console.log(`üéØ Total selected: ${selectedPaths.length} gemstones`);
  console.log("\nüìã Selected gemstones:");
  selectedPaths.forEach((gemPath, index) => {
    console.log(`${index + 1}. ${path.basename(gemPath)}`);
  });

  return selectedPaths;
}

// Main execution
if (import.meta.url === `file://${process.argv[1]}`) {
  selectDiverseGemstones()
    .then((selectedPaths) => {
      console.log("\n‚úÖ Selection complete!");
      console.log(`\nTo import these gemstones, run:`);
      console.log(
        `node scripts/gemstone-import-system-v3-optimized.mjs --source "${GEMS_SOURCE}" --max 20 --random`
      );
    })
    .catch((error) => {
      console.error("‚ùå Selection failed:", error);
      process.exit(1);
    });
}

export { selectDiverseGemstones };
