#!/usr/bin/env node
/**
 * Test script to verify gemstone lookup logic
 */

import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error("‚ùå Missing Supabase configuration");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

function normalizeSerialNumber(serial) {
  if (!serial) return null;

  // Cyrillic to Latin character mapping
  const cyrillicToLatin = {
    –ê: "A",
    –ë: "B",
    –í: "V",
    –ì: "G",
    –î: "D",
    –ï: "E",
    –Å: "E",
    –ñ: "ZH",
    –ó: "Z",
    –ò: "I",
    –ô: "Y",
    –ö: "K",
    –õ: "L",
    –ú: "M",
    –ù: "N",
    –û: "O",
    –ü: "P",
    –†: "R",
    –°: "S",
    –¢: "T",
    –£: "U",
    –§: "F",
    –•: "H",
    –¶: "TS",
    –ß: "CH",
    –®: "SH",
    –©: "SCH",
    –™: "",
    –´: "Y",
    –¨: "",
    –≠: "E",
    –Æ: "YU",
    –Ø: "YA",
  };

  let normalized = serial.toString().toUpperCase().trim();

  // Convert Cyrillic to Latin
  for (const [cyrillic, latin] of Object.entries(cyrillicToLatin)) {
    normalized = normalized.replace(new RegExp(cyrillic, "g"), latin);
  }

  // Remove all spaces, dashes, and underscores
  return normalized.replace(/[\s\-_]+/g, "");
}

async function testLookup() {
  console.log("üß™ Testing gemstone lookup logic...\n");

  // Test cases from CSV
  const testCases = [
    "–ê1",
    "–ê 1",
    "–ê10",
    "–ê 10",
    "–ì11",
    "–ì 11",
    "–ó1",
    "–ó 1",
    "–ù40",
    "–ù 40",
  ];

  for (const testCode of testCases) {
    console.log(`Testing: "${testCode}"`);
    const normalized = normalizeSerialNumber(testCode);
    console.log(`  Normalized: "${normalized}"`);

    // Get all gemstones and find matching normalized internal_code
    const { data, error } = await supabase
      .from("gemstones")
      .select("internal_code, serial_number, name");

    if (error) {
      console.log(`  ‚ùå Error: ${error.message}`);
      continue;
    }

    // Find gemstone with matching normalized internal_code
    const existing = data?.find(
      (gemstone) => normalizeSerialNumber(gemstone.internal_code) === normalized
    );

    if (existing) {
      console.log(
        `  ‚úÖ Found match: ${existing.internal_code} (${existing.name})`
      );
    } else {
      console.log("  ‚ùå No match found");
    }
    console.log();
  }
}

testLookup().catch(console.error);
