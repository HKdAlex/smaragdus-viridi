#!/usr/bin/env node
/**
 * Test script to verify specific gemstone lookup cases
 */

import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error("‚ùå Missing Supabase configuration");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

function normalizeSerialNumber(serial) {
  if (!serial) return null;

  // Cyrillic to Latin character mapping
  const cyrillicToLatin = {
    –ê: "A",
    –ë: "B",
    –í: "V",
    –ì: "G",
    –î: "D",
    –ï: "E",
    –Å: "E",
    –ñ: "ZH",
    –ó: "Z",
    –ò: "I",
    –ô: "Y",
    –ö: "K",
    –õ: "L",
    –ú: "M",
    –ù: "N",
    –û: "O",
    –ü: "P",
    –†: "R",
    –°: "S",
    –¢: "T",
    –£: "U",
    –§: "F",
    –•: "H",
    –¶: "TS",
    –ß: "CH",
    –®: "SH",
    –©: "SCH",
    –™: "",
    –´: "Y",
    –¨: "",
    –≠: "E",
    –Æ: "YU",
    –Ø: "YA",
  };

  let normalized = serial.toString().toUpperCase().trim();

  // Convert Cyrillic to Latin
  for (const [cyrillic, latin] of Object.entries(cyrillicToLatin)) {
    normalized = normalized.replace(new RegExp(cyrillic, "g"), latin);
  }

  // Remove all spaces, dashes, and underscores
  return normalized.replace(/[\s\-_]+/g, "");
}

async function testSpecificLookup() {
  console.log("üß™ Testing specific gemstone lookup cases...\n");

  // Test cases from CSV vs Database
  const testCases = [
    { csv: "–ê1", db: "–ê 1" },
    { csv: "–ê10", db: "–ê 10" },
    { csv: "–ù40", db: "–ù 40" },
    { csv: "–ì11", db: "–ì 11" },
  ];

  for (const testCase of testCases) {
    console.log(`Testing: CSV "${testCase.csv}" vs DB "${testCase.db}"`);

    const csvNormalized = normalizeSerialNumber(testCase.csv);
    const dbNormalized = normalizeSerialNumber(testCase.db);

    console.log(`  CSV normalized: "${csvNormalized}"`);
    console.log(`  DB normalized: "${dbNormalized}"`);
    console.log(`  Match: ${csvNormalized === dbNormalized}`);

    // Try to find the database entry
    const { data, error } = await supabase
      .from("gemstones")
      .select("internal_code, name")
      .eq("internal_code", testCase.db)
      .maybeSingle();

    if (error) {
      console.log(`  ‚ùå Error: ${error.message}`);
    } else if (data) {
      console.log(`  ‚úÖ Found in DB: ${data.internal_code} (${data.name})`);
    } else {
      console.log(`  ‚ùå Not found in DB`);
    }

    console.log();
  }
}

testSpecificLookup().catch(console.error);
